{"version":3,"sources":["asset/octocat.svg","components/banner/banner.style.jsx","components/banner/banner.component.jsx","components/search-box/search-box.style.jsx","components/search-box/search-box.component.jsx","components/card/card.style.jsx","components/card/card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["HeadingStyle","styled","h1","LogoStyle","img","Banner","src","ReactLogo","alt","DivStyle","div","LabelStyle","label","InputStyle","input","SearchBox","onInputChange","autoComplete","onSubmit","e","preventDefault","htmlFor","id","type","placeholder","name","onChange","MainDiv","AvatarStyle","InfoStyle","Card","profile","avatar_url","href","html_url","target","rel","Email","location","public_repos","bio","App","props","event","setState","searchName","value","getData","state","userName","fetch","then","res","json","data","userData","catch","error","alert","console","log","this","className","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2PAAe,G,MAAA,IAA0B,qC,cCE5BA,EAAeC,IAAOC,GAAV,wNAWZC,EAAYF,IAAOG,IAAV,4C,OCOPC,EAbA,WACb,OACE,cAAC,WAAD,UACE,iCACE,eAACL,EAAD,6BAEE,cAACG,EAAD,CAAWG,IAAKC,EAAWC,IAAI,wBCX5BC,EAAWR,IAAOS,IAAV,iJAQRC,EAAaV,IAAOW,MAAV,sDAIVC,EAAaZ,IAAOa,MAAV,6RCWRC,EAlBG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,OACE,cAAC,WAAD,UACE,sBACEC,aAAa,MACbC,SAAU,SAACC,GACTA,EAAEC,kBAHN,SAME,eAACX,EAAD,WACE,cAACE,EAAD,CAAYU,QAAQ,OAApB,yBACA,cAACR,EAAD,CAAYS,GAAG,OAAOC,KAAK,SAASC,YAAY,iBAAiBC,KAAK,OAAOC,SAAUV,YChBpFW,EAAU1B,IAAOS,IAAV,oJAQPkB,EAAc3B,IAAOG,IAAV,mEAKXyB,EAAY5B,IAAOS,IAAV,oJC6BPoB,EArCF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACE,eAACJ,EAAD,WAEE,8BACE,cAACC,EAAD,CAAatB,IAAKyB,EAAQC,WAAYxB,IAAKuB,EAAQN,SAIrD,eAACI,EAAD,WAEE,yCAAYE,EAAQN,QAGpB,+CACe,IACb,mBAAGQ,KAAMF,EAAQG,SAAUC,OAAO,SAASC,IAAI,sBAA/C,SACGL,EAAQG,cAKb,0CAAaH,EAAQM,SAGrB,4CAAeN,EAAQO,YAGvB,iDAAoBP,EAAQQ,gBAG5B,wCAAWR,EAAQS,cCaZC,E,kDA3Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAOR1B,cAAgB,SAAC2B,GACf,EAAKC,SAAS,CAAEC,WAAYF,EAAMR,OAAOW,QAAS,WAChD,EAAKC,QAAQ,EAAKC,MAAMH,gBAVT,EAcnBE,QAAU,SAACE,GACTC,MAAM,gCAAD,OAAiCD,IACnCE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKV,SAAS,CAAEW,SAAUD,OACzCE,OAAM,SAACC,GACNC,MAAM,gCACNC,QAAQC,IAAI,yBAA0BH,OAlB1C,EAAKT,MAAQ,CACXH,WAAY,GACZU,SAAU,IAJK,E,0CAwBnB,WACE,OACE,eAAC,WAAD,WACE,cAAC,EAAD,IAEA,cAAC,EAAD,CAAWvC,cAAe6C,KAAK7C,gBAC9B6C,KAAKb,MAAMO,SAASjC,IAAgC,KAA1BuC,KAAKb,MAAMH,WACpC,cAAC,EAAD,CAAMd,QAAS8B,KAAKb,MAAMO,WAG1B,sBAAKO,UAAU,UAAf,4BACiB,iC,GApCTC,aCKEC,QACa,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLE,QAAQF,MAAMA,EAAMqB,c","file":"static/js/main.afd70f99.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/octocat.82c54c84.svg\";","import styled from \"styled-components\";\r\n\r\nexport const HeadingStyle = styled.h1`\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 10px;\r\n  text-transform: uppercase;\r\n  font-size: 4rem;\r\n`;\r\n\r\nexport const LogoStyle = styled.img`\r\n  width: 5rem;\r\n`;","import React, { Fragment } from \"react\";\r\nimport ReactLogo from \"../../asset/octocat.svg\";\r\n\r\n// Styling\r\nimport { HeadingStyle } from \"./banner.style\";\r\nimport { LogoStyle } from \"./banner.style\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <Fragment>\r\n      <header>\r\n        <HeadingStyle>\r\n          Get GitHub Info\r\n          <LogoStyle src={ReactLogo} alt=\"GitHub Logo\" />\r\n        </HeadingStyle>\r\n      </header>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Banner;","import styled from \"styled-components\";\r\n\r\nexport const DivStyle = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport const LabelStyle = styled.label`\r\n  padding-bottom: 0.3em;\r\n`;\r\n\r\nexport const InputStyle = styled.input`\r\n  border-radius: 20px;\r\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.08), 0 2px 2px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.16), 0 8px 8px rgba(0, 0, 0, 0.2);\r\n  height: 40px;\r\n  width: 200px;\r\n  text-align: center;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;","import React, { Fragment } from \"react\";\r\n\r\n// Styling\r\nimport { DivStyle } from \"./search-box.style\";\r\nimport { LabelStyle } from \"./search-box.style\";\r\nimport { InputStyle } from \"./search-box.style\";\r\n\r\nconst SearchBox = ({ onInputChange }) => {\r\n  return (\r\n    <Fragment>\r\n      <form\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <DivStyle>\r\n          <LabelStyle htmlFor=\"user\">Search User</LabelStyle>\r\n          <InputStyle id=\"user\" type=\"search\" placeholder=\"Enter username\" name=\"user\" onChange={onInputChange} />\r\n        </DivStyle>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchBox;","import styled from \"styled-components\";\r\n\r\nexport const MainDiv = styled.div`\r\n  padding-top: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n`;\r\n\r\nexport const AvatarStyle = styled.img`\r\n  width: 10em;\r\n  padding-right: 1em;\r\n`;\r\n\r\nexport const InfoStyle = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  font-size: 1em;\r\n`;","import React from \"react\";\r\n\r\n// import Style\r\nimport { MainDiv } from \"./card.style\";\r\nimport { InfoStyle } from \"./card.style\";\r\nimport { AvatarStyle } from \"./card.style\";\r\n\r\nconst Card = ({ profile }) => {\r\n  return (\r\n    <MainDiv>\r\n      {/* Avatar */}\r\n      <div>\r\n        <AvatarStyle src={profile.avatar_url} alt={profile.name} />\r\n      </div>\r\n\r\n      {/* Info */}\r\n      <InfoStyle>\r\n        {/* Name */}\r\n        <div>Name: {profile.name}</div>\r\n\r\n        {/* Github Link */}\r\n        <div>\r\n          GitHub Link:{\" \"}\r\n          <a href={profile.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {profile.html_url}\r\n          </a>\r\n        </div>\r\n\r\n        {/* email */}\r\n        <div>Email: {profile.Email}</div>\r\n\r\n        {/* Location */}\r\n        <div>Location:{profile.location}</div>\r\n\r\n        {/* Public repo */}\r\n        <div>Public repos: {profile.public_repos}</div>\r\n        \r\n        {/* Info */}\r\n        <div>Bio: {profile.bio}</div>\r\n      </InfoStyle>\r\n    </MainDiv>\r\n  );\r\n};\r\n\r\nexport default Card;","import React, { Fragment, Component } from \"react\";\n\nimport \"./App.css\";\nimport Banner from \"./components/banner/banner.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport Card from \"./components/card/card.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchName: \"\",\n      userData: \"\",\n    };\n  }\n\n  onInputChange = (event) => {\n    this.setState({ searchName: event.target.value }, () => {\n      this.getData(this.state.searchName);\n    });\n  };\n\n  getData = (userName) => {\n    fetch(`https://api.github.com/users/${userName}`)\n      .then((res) => res.json())\n      .then((data) => this.setState({ userData: data }))\n      .catch((error) => {\n        alert(\"Oops! Could not reach GitHub\");\n        console.log(\"Oops! We have an error\", error);\n      });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Banner />\n\n        <SearchBox onInputChange={this.onInputChange} />\n        {this.state.userData.id && this.state.searchName !== \"\" ? (\n          <Card profile={this.state.userData} />\n        ) : (\n          \n          <div className=\"no-data\">\n            No user Found! <br />\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}